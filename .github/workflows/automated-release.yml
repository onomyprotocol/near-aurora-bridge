on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
      - "v*" # Push events to matching v*, i.e. v1.0, v20.15.10

name: Automated release build

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build and upload release assets
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [14.x]
    steps:
      - name: Set up Go 1.x
        uses: actions/setup-go@v2
        with:
          go-version: ^1.13
        id: go

      - name: Checkout code
        uses: actions/checkout@v2

      # build the code before creating the release, GO and Solidity first for faster failures
      - name: Build GO
        run: |
          cd module
          make

      - name: Set ENV var for GOPATH
        run: |
          echo "GOPATH=$(go env GOPATH)" >> $GITHUB_ENV

      - name: Build Solidity artifacts
        run: cd solidity && npm ci && npm run typechain

      - name: Build contract deployment script into a static binary
        run: cd solidity && npm ci && npm run compile-deployer

      - name: Build Rust x86_64
        run: |
          cargo install cross
          cd orchestrator
          cross build --target x86_64-unknown-linux-musl --release --all

      # now that the code has built create the release and start uploading
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: true

      # the Rust binaries, a loop would make this much more compact
      - name: Upload Rust gbt
        id: upload-rust-release-gbt
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./orchestrator/target/x86_64-unknown-linux-musl/release/gbt
          asset_name: gbt
          asset_content_type: application/bin

      - name: Upload Rust test runner
        id: upload-rust-test-runner
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./orchestrator/target/x86_64-unknown-linux-musl/release/test-runner
          asset_name: test-runner
          asset_content_type: application/bin

      - name: Upload Go Release Asset
        id: upload-go-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.GOPATH }}/bin/gravity
          asset_name: gravity
          asset_content_type: application/bin

      # next we upload the contract artifact, in a production situation a previous version will
      # already be deployed on Ethereum and this won't be very useful, but as any chain leads up
      # to launch it's nice to have a version history for the contract itself and see what if any
      # changes are made that may go unnoticed due to tooling
      - name: Upload Gravity Ethereum artifacts
        id: upload-solidity-artifacts
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: solidity/artifacts/contracts/Gravity.sol/Gravity.json
          asset_name: Gravity.json
          asset_content_type: application/bin

      - name: Upload Gravity Ethereum test artifact A
        id: upload-solidity-test-a
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: solidity/artifacts/contracts/TestERC20A.sol/TestERC20A.json
          asset_name: TestERC20A.json
          asset_content_type: application/bin
      - name: Upload Gravity Ethereum test artifact B
        id: upload-solidity-test-b
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: solidity/artifacts/contracts/TestERC20B.sol/TestERC20B.json
          asset_name: TestERC20B.json
          asset_content_type: application/bin
      - name: Upload Gravity Ethereum test artifact C
        id: upload-solidity-test-c
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: solidity/artifacts/contracts/TestERC20C.sol/TestERC20C.json
          asset_name: TestERC20C.json
          asset_content_type: application/bin

      - name: Upload contract deployer
        id: upload-contract-deployer
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: solidity/contract-deployer
          asset_name: contract-deployer
          asset_content_type: application/bin

      # finally we start arm builds and uploads, we do this because the release
      # entry is already made and rust builds take nearly 10 minutes, so instead
      # of having a workable release in 20 minutes we can have one in 10 with the ARM
      # binaries coming 10 minutes later.
      - name: Build Rust ARM64
        run: |
          cd orchestrator
          cross build --target aarch64-unknown-linux-musl --release --all

      - name: Build GO ARM64
        run: |
          cd module
          GOARCH=arm64 make

      - name: Upload Rust gbt ARM
        id: upload-rust-release-gbt-arm
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./orchestrator/target/aarch64-unknown-linux-musl/release/gbt
          asset_name: gbt-arm
          asset_content_type: application/bin

      - name: Upload Go Release Asset ARM
        id: upload-go-release-asset-arm
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.GOPATH }}/bin/gravity
          asset_name: gravity-arm
          asset_content_type: application/bin
